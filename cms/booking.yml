openapi: "3.0.3"
info:
  title: Booking API in calendar feature For CMS
  version: "1.0.1"
servers:
  - url: http://35.198.194.208:30015/booking
    description: Production server
  - url: https://localhost:3000/api
    description: Local server
tags:
  - name: Store
    description: Store related operations
  - name: Service
    description: Service related operations
  - name: Industry
    description: Industry related operations
  - name: Team
    description: Team related operations
security:
  - BearerAuth: []

paths:
  /account/{accountId}/stores:
    get:
      description: "Get all stores of an account"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/accountId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/Store"

  /stores:
    get:
      description: "Get all stores"
      tags:
        - Store
      parameters:
        - $ref: "./common.yml#/components/parameters/search"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - name: industries
          in: query
          required: false
          description: "Filter stores by array industries"
          schema:
            type: array
            items:
              type: string
              example: "Beauty"
              description: Name of the industry
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/Store"
    post:
      description: "Create a store"
      tags:
        - Store
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Store"

      responses:
        "201":
          description: Created
  /stores/{storeId}:
    get:
      description: "Get a store by id"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
  /stores/{storeId}/accounts/{accountId}:
    get:
      description: "Get Team based on storeId and accountId"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
  /stores/{storeId}/availability:
    get:
      description: "Get availability of a store in a from start time to end time"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Availability"
  /stores/{storeId}/book:
    get:
      description: "Get booked services of a store in a time range (all team members)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      description: "Book a service in a store by a CMS user. Note: Customer can be anonymous with different schema (see the schema option)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBook"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: "./common.yml#/components/schemas/Id"
                    description: Id of the booking
  /stores/{storeId}/services:
    get:
      description: "Get services of a store."
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering, search by name of the service"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - services
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  services:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
  /stores/{storeId}/teams:
    get:
      description: "Get team members for a store version 2"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
          description: "Search string for filtering, search by name of the team member"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - teams
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
  /stores/{storeId}/customers:
    get:
      description: "Get customers booked that has account (customers version 2)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering, search by name  or phone number of booked record"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - customers
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  customers:
                    type: array
                    items:
                      $ref: "./common.yml#/components/schemas/Id"
                      description: Account IDs.
  /stores/{storeId}/customers/{accountId}:
    get:
      description: "Get all booked profile(s) of the customer of the store by accountId"
      tags:
        - Store
        - Upgrade
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering, search by name  or phone number of booked record"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - customers
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  customers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
  /stores/{storeId}/anonymous-customers:
    get:
      description: "Get customers booked that has no account (accountId is null) (no need to distinct)"
      tags:
        - Store
        - Upgrade
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering, search by name of booked customers record (without accountId)"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - customers
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  customers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
    post:
      description: "Create a customer with no account (anonymous) in a store"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomer"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: "./common.yml#/components/schemas/Id"
                    description: Id of the customer in Booking domain (not the account id).

  /stores/{storeId}/connection:
    post:
      description: "Connect a client to a store, (only for Client)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
    delete:
      description: "Disconnect a client from a store, (only for Client)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK

  /books:
    get:
      description: "Get all bookings (depends on the user role)"
      tags:
        - Book
      parameters:
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
          description: "Search string for filtering, search by name of the customer or phone number"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - books
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  books:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
  /books/{bookId}:
    get:
      description: "Get a booking by id"
      tags:
        - Book
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    put:
      description: "Update a booking by id"
      tags:
        - Book
      parameters:
        - $ref: "#/components/parameters/bookId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBook"
      responses:
        "200":
          description: OK
    delete:
      description: "Delete a booking by id"
      tags:
        - Book
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "204":
          description: No Content

  /teams/{teamId}:
    get:
      description: "Get a team member by id"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    delete:
      description: "Remove a team member from a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "204":
          description: No Content
  /teams/{teamId}/role:
    patch:
      description: "Update role of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  $ref: "#/components/schemas/CMSRole"
      responses:
        "200":
          description: OK
  /teams/{teamId}/work-hours:
    patch:
      description: "Update work hours of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkHoursInWeek"
      responses:
        "200":
          description: OK
  /teams/{teamId}/time-off:
    get:
      description: "Get time off of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - fromDate
                    - toDate
                  properties:
                    fromDate:
                      $ref: "./common.yml#/components/schemas/DateTime"
                      description: Start date of the time off
                    toDate:
                      $ref: "./common.yml#/components/schemas/DateTime"
                      description: End date of the time off
    post:
      description: "Create a time off for a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - start
                - end
              properties:
                fromDate:
                  $ref: "./common.yml#/components/schemas/DateTime"
                toDate:
                  $ref: "./common.yml#/components/schemas/DateTime"
      responses:
        "201":
          description: Created
    delete:
      description: "Delete a time off for a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - teamTimeOffId
              properties:
                teamTimeOffId:
                  $ref: "./common.yml#/components/schemas/Id"
                  description: Id of the time off to be deleted of the team
      responses:
        "204":
          description: No Content
  /teams/{teamId}/availability:
    get:
      description: "Get availability of a team member in a store in time range"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Availability"
  /teams/{teamId}/book:
    get:
      description: "Get booked services of a team member in a store in time range"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /teams/{teamId}/services:
    get:
      description: "Get services of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"

  /services:
    post:
      description: "Create a service"
      tags:
        - Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateService"
      responses:
        "201":
          description: Created
  /services/{serviceId}:
    get:
      description: "Get a service by id"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
    put:
      description: "Update a service"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateService"
      responses:
        "200":
          description: OK
    delete:
      description: "Delete a service"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "204":
          description: No Content
  /services/{serviceId}/teams:
    get:
      description: "Get team members for a service"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
          description: "Search string for filtering, search by name of the team member"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"

  /industries:
    get:
      description: "Get all industries"
      tags:
        - Industry
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Beauty"
                  description: Name of the industry

  /unauth-stores/{storeId}:
    get:
      description: "Get a store by id"
      tags:
        - Store
        - Unauthenticated
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
  /unauth-stores/{storeId}/book:
    post:
      description: "Book a service in a store by a CMS user. Note: Customer can be anonymous with different schema (see the schema option)"
      tags:
        - Store
        - Unauthenticated
      parameters:
        - $ref: "#/components/parameters/storeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBook"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: "./common.yml#/components/schemas/Id"
                    description: Id of the booking
  /unauth-stores/{storeId}/services:
    get:
      description: "Get services of a store."
      tags:
        - Store
        - Unauthenticated
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering, search by name of the service"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - services
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  services:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
  /unauth-stores/{storeId}/teams:
    get:
      description: "Get team members for a store version 2"
      tags:
        - Store
        - Unauthenticated
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
          description: "Search string for filtering, search by name of the team member"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - teams
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"

  /unauth-books/{bookId}:
    get:
      description: "Get a booking by id"
      tags:
        - Book
        - Unauthenticated
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    put:
      description: "Update a booking by id"
      tags:
        - Book
        - Unauthenticated
      parameters:
        - $ref: "#/components/parameters/bookId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBook"
      responses:
        "200":
          description: OK
    delete:
      description: "Delete a booking by id"
      tags:
        - Book
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "204":
          description: No Content

  /unauth-teams/{teamId}/services:
    get:
      description: "Get services of a team member in a store"
      tags:
        - Team
        - Unauthenticated
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"

  /unauth-services/{serviceId}/teams:
    get:
      description: "Get team members for a service"
      tags:
        - Service
        - Unauthenticated
      parameters:
        - $ref: "#/components/parameters/serviceId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
          description: "Search string for filtering, search by name of the team member"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"

components:
  schemas:
    Time:
      type: object
      properties:
        hour:
          type: integer
          example: 9
          description: Hour of the time (0-23)
          maximum: 23
          minimum: 0
        minute:
          type: integer
          example: 0
          description: Minute of the time
          maximum: 59
          minimum: 0
      required:
        - hour
        - minute
    TimeRange:
      type: object
      description: Time range in a day. From start to end time (hour and minute).
      required:
        - start
        - end
      properties:
        start:
          $ref: "#/components/schemas/Time"
          description: Start time
        end:
          $ref: "#/components/schemas/Time"
          description: End time
    Availability:
      description: Is an array of time ranges that is available for booking (of a store or a team member). Each item is an array of time ranges in a day.
      type: array
      items:
        type: array
        items:
          $ref: "#/components/schemas/TimeRange"
      example:
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 18
              minute: 0
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 12
              minute: 0
          - start:
              hour: 13
              minute: 0
            end:
              hour: 18
              minute: 0
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 12
              minute: 0
          - start:
              hour: 15
              minute: 0
            end:
              hour: 18
              minute: 0
    WorkHoursInWeek:
      type: array
      items:
        type: object
        required:
          - dayOfWeek
          - workHours
        properties:
          dayOfWeek:
            type: integer
            example: 0
            description: Day of the week (0-6) where 0 is Monday and 6 is Sunday.
            maximum: 6
            minimum: 0
          workHours:
            type: array
            items:
              $ref: "#/components/schemas/TimeRange"
            description: Work hours of the team member in a day.
      example:
        - dayOfWeek: 0
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 1
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
                minute: 0
            - start:
                hour: 13
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 2
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
                minute: 0
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 3
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 4
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0

    BookBase:
      type: object
      required:
        - start
        - end
        - notification
      properties:
        start:
          $ref: "./common.yml#/components/schemas/DateTime"
        end:
          $ref: "./common.yml#/components/schemas/DateTime"
        notification:
          $ref: "#/components/schemas/BookingNotification"
          description: Notification for the booking
        comment:
          type: string
          example: "Please bring your own mask"
          description: Comment for the service
    CreateBook:
      allOf:
        - $ref: "#/components/schemas/BookBase"
        - type: object
          required:
            - serviceId
            - teamId
          properties:
            serviceId:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the service
            teamId:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the team member
            customer:
              $ref: "#/components/schemas/Profile"
              description: Booking profile of the customer.
    Book:
      allOf:
        - $ref: "#/components/schemas/BookBase"
        - type: object
          required:
            - id
            - service
            - team
            - customer
            - status
            - storeId
          properties:
            id:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the booking
            storeId:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the store
            service:
              $ref: "#/components/schemas/Service"
            team:
              $ref: "#/components/schemas/Team"
            customer:
              $ref: "#/components/schemas/Customer"
              description: Booking profile of the customer when they have created the booking (has ID).
            status:
              $ref: "#/components/schemas/BookingStatus"
    BookingStatus:
      type: string
      enum:
        - new
        - ready
        - denined
        - done
      example: "new"
      description: Status of the booking.
    BookingNotification:
      type: object
      required:
        - smsPassword
        - storeId
      properties:
        email:
          type: boolean
          description: Send email notification
          example: true
        sms:
          type: boolean
          description: Send SMS notification
          example: true

    Store:
      type: object
      required:
        - id
        - adminId
        - name
        - description
        - address
        - industry
        - phone
        - timezone
      properties:
        id:
          $ref: "./common.yml#/components/schemas/Id"
        adminId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the admin account
        name:
          type: string
          example: "My Store"
          description: Name of the store
        description:
          type: string
          example: "A simple store"
          description: Description of the store
        address:
          type: string
          example: "123, Example Street, City, Country"
          description: Address of the store
        industry:
          type: string
          example: "Beauty"
          description: Industry of the store
        phone:
          type: string
          example: "+1234567890"
          description: Phone number of the store
        timezone:
          type: string
          example: "Asia/Kolkata"
          description: Timezone of the store
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
          description: Avatar of the store

    Profile:
      type: object
      required:
        - id
        - name
        - phone
        - email
      properties:
        accountId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the customer account. This is optional and can be null if the customer is anonymous.
        name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "1234567890"
        email:
          type: string
          example: "abc@gmail.com"
        address:
          type: string
          example: "123, Example Street, City, Country"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
    CreateCustomer:
      type: object
      required:
        - name
        - phone
        - email
        - storeId
      properties:
        accountId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the customer account. This is optional and can be null if the customer is anonymous.
        name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "1234567890"
        email:
          type: string
          example: "abc@gmail.com"
        address:
          type: string
          example: "123, Example Street, City, Country"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
        storeId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
    Customer:
      allOf:
        - $ref: "#/components/schemas/CreateCustomer"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the customer in Booking domain (not the account id).
    CMSRole:
      type: number
      enum:
        - 1
        - 2
        - 3
      description: Role of the user (1 - admin, 2 - manager, 3 - employee)

    CreateTeam:
      type: object
      required:
        - accountId
        - storeId
        - role
        - workHours
      properties:
        accountId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the account
        storeId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        role:
          $ref: "#/components/schemas/CMSRole"
        workHours:
          $ref: "#/components/schemas/WorkHoursInWeek"
    Team:
      allOf:
        - $ref: "#/components/schemas/CreateTeam"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the team member in Booking domain (not the account id).

    SMSAccount:
      type: object
      required:
        - smsAccount
        - smsPassword
        - storeId
      properties:
        smsAccount:
          type: string
          description: SMS account name
          example: "sms_account"
        smsPassword:
          type: string
          description: SMS account password
          example: "sms_password"
          format: password
        storeId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        order:
          type: integer
          description: Order of the SMS account in the list
          example: 1
          minimum: 0

    CreateService:
      type: object
      required:
        - name
        - duration
        - members
      properties:
        storeId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        name:
          type: string
          example: "Haircut"
          description: Name of the service
        description:
          type: string
          example: "A simple haircut service"
          description: Description of the service
        duration:
          type: integer
          example: 30
          description: Duration of the service in minutes.
          minimum: 0
        members:
          type: array
          items:
            $ref: "./common.yml#/components/schemas/Id"
            description: "Team member ID array"
          description: Team members who can provide the service
        category:
          type: string
          example: "Hair"
          description: Category of the service
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
          description: Avatar of the service
        hidden:
          type: boolean
          example: false
          description: Is the service hidden or not
    Service:
      type: object
      required:
        - id
        - storeId
        - name
        - duration
        - members
        - hidden
      properties:
        id:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the service
        storeId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        name:
          type: string
          example: "Haircut"
          description: Name of the service
        description:
          type: string
          example: "A simple haircut service"
          description: Description of the service
        duration:
          type: integer
          example: 30
          description: Duration of the service in minutes.
          minimum: 0
        members:
          type: array
          items:
            $ref: "#/components/schemas/Team"
          description: Team members who can provide the service
        category:
          type: string
          example: "Hair"
          description: Category of the service
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
          description: Avatar of the service
        hidden:
          type: boolean
          example: false
          description: Is the service hidden or not

  parameters:
    accountId:
      name: accountId
      in: path
      required: true
      description: "Id of the account"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    storeId:
      name: storeId
      in: path
      required: true
      description: "Id of the store"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    teamId:
      name: teamId
      in: path
      required: true
      description: "Id of a team member"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    serviceId:
      name: serviceId
      in: path
      required: true
      description: "Id of the service"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    start:
      name: start
      in: query
      required: true
      description: "Start of the time range in date time"
      schema:
        type: string
        format: date-time
        example: "2021-01-01T09:00:00Z"
    end:
      name: end
      in: query
      required: true
      description: "End of the time range in date time"
      schema:
        type: string
        format: date-time
        example: "2021-01-01T18:00:00Z"
    bookId:
      name: bookId
      in: path
      required: true
      description: "Id of the booking"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token"
