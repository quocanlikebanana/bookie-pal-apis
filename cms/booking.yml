openapi: "3.0.3"
info:
  title: Booking API in calendar feature For CMS
  version: "1.0.1"
servers:
  - url: http://35.198.194.208:30015/booking
    description: Production server
  - url: https://localhost:3000/api
    description: Local server
tags:
  - name: Store
    description: Store related operations
  - name: Service
    description: Service related operations
  - name: Industry
    description: Industry related operations
  - name: Team
    description: Team related operations

paths:
  /account/{accountId}/stores:
    get:
      description: "Get all stores of an account "
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "#/components/schemas/pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/store"

  /stores:
    get:
      description: "Get all stores"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "#/components/schemas/pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/store"
  /stores/{storeId}:
    get:
      description: "Get a store by id"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/store"
  /stores/{storeId}/availability:
    get:
      description: "Get availability of a store in a from start time to end time"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/availability"
  /stores/{storeId}/booked:
    get:
      description: "Get booked services of a store in a time range (all team members)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
  /stores/{storeId}/book:
    post:
      description: "Book a service in a store by a CMS user. Note: Customer can be anonymous with different schema (see the schema option)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - teamId
                - serviceId
                - start
                - end
                - customer
              properties:
                teamId:
                  $ref: "#/components/schemas/id"
                serviceId:
                  $ref: "#/components/schemas/id"
                start:
                  $ref: "#/components/schemas/dateTime"
                end:
                  $ref: "#/components/schemas/dateTime"
                comment:
                  type: string
                  example: "Please bring your own mask"
                  description: Comment for the service
                customer:
                  $ref: "#/components/schemas/createCustomer"
      responses:
        "201":
          description: Created
  /stores/{storeId}/services:
    get:
      description: "Get services of a store."
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
  /stores/{storeId}/customers:
    get:
      description: "Get customers of a store."
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/customer"
  /stores/{storeId}/teams:
    get:
      description: "Get team members for a store"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/id"
                  description: "Array of team IDs"

  /stores/{storeId}/v2/teams:
    get:
      description: "Get team members for a store version 2"
      tags:
        - Store
        - Upgrade
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - teams
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
  /stores/{storeId}/v2/customers:
    get:
      description: "Get customers booked that has account (customers version 2)"
      tags:
        - Store
        - Upgrade
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/search"
          description: "Search string for filtering, search by name  or phone number of booked record"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - customers
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  customers:
                    type: array
                    items:
                      $ref: "#/components/schemas/id"
                      description: Account IDs.
  /stores/{storeId}/customers/{accountId}:
    get:
      description: "Get all booked profile(s) of the customer of the store by accountId"
      tags:
        - Store
        - Upgrade
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/search"
          description: "Search string for filtering, search by name  or phone number of booked record"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - customers
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  customers:
                    type: array
                    items:
                      $ref: "#/components/schemas/customer"
  /stores/{storeId}/anomynous-customers:
    get:
      description: "Get customers booked that has no account (accountId is null) (no need to distinct)"
      tags:
        - Store
        - Upgrade
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/search"
          description: "Search string for filtering, search by name  or phone number of booked record"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - customers
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  customers:
                    type: array
                    items:
                      $ref: "#/components/schemas/customer"

  /teams:
    post:
      description: "Create a team member"
      tags:
        - Team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeam"
      responses:
        "201":
          description: Created
  /teams/{teamId}:
    get:
      description: "Get a team member by id"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    delete:
      description: "Remove a team member from a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "204":
          description: No Content
  /teams/{teamId}/role:
    patch:
      description: "Update role of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  $ref: "#/components/schemas/CMSRole"
      responses:
        "200":
          description: OK
  /teams/{teamId}/work-hours:
    patch:
      description: "Update work hours of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/workHoursInWeek"
      responses:
        "200":
          description: OK
  /teams/{teamId}/time-off:
    get:
      description: "Get time off of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - fromDate
                    - toDate
                  properties:
                    fromDate:
                      $ref: "#/components/schemas/dateTime"
                      description: Start date of the time off
                    toDate:
                      $ref: "#/components/schemas/dateTime"
                      description: End date of the time off
    post:
      description: "Create a time off for a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - start
                - end
              properties:
                fromDate:
                  $ref: "#/components/schemas/dateTime"
                toDate:
                  $ref: "#/components/schemas/dateTime"
      responses:
        "201":
          description: Created
    delete:
      description: "Delete a time off for a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - teamTimeOffId
              properties:
                teamTimeOffId:
                  $ref: "#/components/schemas/id"
                  description: Id of the time off to be deleted of the team
      responses:
        "204":
          description: No Content
  /teams/{teamId}/availability:
    get:
      description: "Get availability of a team member in a store in time range"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/availability"
  /teams/{teamId}/booked:
    get:
      description: "Get booked services of a team member in a store in time range"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
  /teams/{teamId}/services:
    get:
      description: "Get services of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"

  /services:
    post:
      description: "Create a service"
      tags:
        - Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateService"
      responses:
        "201":
          description: Created
  /services/{serviceId}:
    get:
      description: "Get a service by id"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
    put:
      description: "Update a service"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateService"
      responses:
        "200":
          description: OK
    delete:
      description: "Delete a service"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "204":
          description: No Content
  /services/{serviceId}/teams:
    get:
      description: "Get team members for a service"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/id"
                  description: "Array of team IDs"

  /anomynous-customers:
    post:
      description: "Create a customer with no account (anomynous)"
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCustomer"
      responses:
        "201":
          description: Created

  /industries:
    get:
      description: "Get all industries"
      tags:
        - Industry
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Beauty"
                  description: Name of the industry

components:
  schemas:
    id:
      type: string
      format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"
      description: Id of the entity
    time:
      type: object
      properties:
        hour:
          type: integer
          example: 9
          description: Hour of the time (0-23)
          maximum: 23
          minimum: 0
        minute:
          type: integer
          example: 0
          description: Minute of the time
          maximum: 59
          minimum: 0
      required:
        - hour
        - minute
    timeRange:
      type: object
      description: Time range in a day. From start to end time (hour and minute).
      required:
        - start
        - end
      properties:
        start:
          $ref: "#/components/schemas/time"
          description: Start time
        end:
          $ref: "#/components/schemas/time"
          description: End time
    availability:
      description: Is an array of time ranges that is available for booking (of a store or a team member). Each item is an array of time ranges in a day.
      type: array
      items:
        type: array
        items:
          $ref: "#/components/schemas/timeRange"
      example:
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 18
              minute: 0
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 12
              minute: 0
          - start:
              hour: 13
              minute: 0
            end:
              hour: 18
              minute: 0
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 12
              minute: 0
          - start:
              hour: 15
              minute: 0
            end:
              hour: 18
              minute: 0
    workHoursInWeek:
      type: array
      items:
        type: object
        required:
          - dayOfWeek
          - workHours
        properties:
          dayOfWeek:
            type: integer
            example: 0
            description: Day of the week (0-6) where 0 is Monday and 6 is Sunday.
            maximum: 6
            minimum: 0
          workHours:
            type: array
            items:
              $ref: "#/components/schemas/timeRange"
            description: Work hours of the team member in a day.
      example:
        - dayOfWeek: 0
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 1
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
                minute: 0
            - start:
                hour: 13
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 2
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
                minute: 0
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 3
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 4
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0
    dateTime:
      type: string
      format: date-time
      example: "2021-01-01T09:00:00Z"
      description: Date time in ISO 8601 format
    book:
      type: object
      required:
        - id
        - service
        - customer
        - start
        - end
        - status
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
          description: Id of the service
        service:
          $ref: "#/components/schemas/Service"
        customer:
          $ref: "#/components/schemas/customer"
        start:
          type: string
          format: date-time
          example: "2021-01-01T09:00:00Z"
          description: Start time of the service
        end:
          type: string
          format: date-time
          example: "2021-01-01T09:30:00Z"
          description: End time of the service
        comment:
          type: string
          example: "Please bring your own mask"
          description: Comment for the service
        status:
          $ref: "#/components/schemas/bookingStatus"
    createCustomer:
      type: object
      required:
        - name
        - phone
      properties:
        accountId:
          $ref: "#/components/schemas/id"
          description: Id of the customer account. This is optional and can be null if the customer is anomynous.
        name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "1234567890"
        email:
          type: string
          example: "abc@gmail.com"
        address:
          type: string
          example: "123, Example Street, City, Country"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
    customer:
      allOf:
        - $ref: "#/components/schemas/createCustomer"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/id"
              description: Id of the customer in Booking domain (not the account id).
    bookingStatus:
      type: string
      enum:
        - new
        - ready
        - denined
        - done
      example: "new"
      description: Status of the booking.
    store:
      type: object
      required:
        - id
        - name
        - description
        - address
        - industry
        - phone
        - timezone
        - workHours
      properties:
        id:
          $ref: "#/components/schemas/id"
        name:
          type: string
          example: "My Store"
          description: Name of the store
        description:
          type: string
          example: "A simple store"
          description: Description of the store
        address:
          type: string
          example: "123, Example Street, City, Country"
          description: Address of the store
        industry:
          type: string
          example: "Beauty"
          description: Industry of the store
        phone:
          type: string
          example: "+1234567890"
          description: Phone number of the store
        timezone:
          type: string
          example: "Asia/Kolkata"
          description: Timezone of the store
        workHours:
          $ref: "#/components/schemas/workHoursInWeek"
    pagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
          description: Current page number, starts from 1
          minimum: 1
        limit:
          type: integer
          example: 10
          description: Limit number of items per page, starts from 1
          minimum: 1
          maximum: 1000
        totalItems:
          type: integer
          example: 100
          description: Total number of items in the database
          minimum: 0
        totalPages:
          type: integer
          example: 10
          description: Total number of pages, starts from 1
          minimum: 1

    CMSRole:
      type: number
      enum:
        - 1
        - 2
        - 3
      description: Role of the user (1 - admin, 2 - manager, 3 - employee)
    CreateTeam:
      type: object
      required:
        - accountId
        - storeId
        - role
        - workHours
      properties:
        accountId:
          $ref: "#/components/schemas/id"
          description: Id of the account
        storeId:
          $ref: "#/components/schemas/id"
          description: Id of the store
        role:
          $ref: "#/components/schemas/CMSRole"
        workHours:
          $ref: "#/components/schemas/workHoursInWeek"
    Team:
      allOf:
        - $ref: "#/components/schemas/CreateTeam"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/id"
              description: Id of the team member in Booking domain (not the account id).
    SMSAccount:
      type: object
      required:
        - smsAccount
        - smsPassword
        - storeId
      properties:
        smsAccount:
          type: string
          description: SMS account name
          example: "sms_account"
        smsPassword:
          type: string
          description: SMS account password
          example: "sms_password"
          format: password
        storeId:
          $ref: "#/components/schemas/id"
          description: Id of the store
        order:
          type: integer
          description: Order of the SMS account in the list
          example: 1
          minimum: 0
    CreateService:
      type: object
      required:
        - name
        - description
        - duration
        - members
        - category
      properties:
        storeId:
          $ref: "#/components/schemas/id"
          description: Id of the store
        name:
          type: string
          example: "Haircut"
          description: Name of the service
        description:
          type: string
          example: "A simple haircut service"
          description: Description of the service
        duration:
          type: integer
          example: 30
          description: Duration of the service in minutes.
          minimum: 0
        members:
          type: array
          items:
            $ref: "#/components/schemas/id"
            description: "Team member ID array"
          description: Team members who can provide the service
        category:
          type: string
          example: "Hair"
          description: Category of the service
    Service:
      allOf:
        - $ref: "#/components/schemas/CreateService"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/id"
              description: Id of the service in Booking domain.

  parameters:
    accountId:
      name: accountId
      in: path
      required: true
      description: "Id of the account"
      schema:
        $ref: "#/components/schemas/id"
    storeId:
      name: storeId
      in: path
      required: true
      description: "Id of the store"
      schema:
        $ref: "#/components/schemas/id"
    teamId:
      name: teamId
      in: path
      required: true
      description: "Id of a team member"
      schema:
        $ref: "#/components/schemas/id"
    serviceId:
      name: serviceId
      in: path
      required: true
      description: "Id of the service"
      schema:
        $ref: "#/components/schemas/id"
    start:
      name: start
      in: query
      required: true
      description: "Start of the time range in date time"
      schema:
        type: string
        format: date-time
        example: "2021-01-01T09:00:00Z"
    end:
      name: end
      in: query
      required: true
      description: "End of the time range in date time"
      schema:
        type: string
        format: date-time
        example: "2021-01-01T18:00:00Z"
    page:
      name: page
      in: query
      required: false
      description: "Page number for pagination"
      schema:
        type: integer
        example: 1
        minimum: 1
    limit:
      name: limit
      in: query
      required: false
      description: "Limit number of items per page"
      schema:
        type: integer
        example: 10
        minimum: 1
        maximum: 1000
    search:
      name: search
      in: query
      required: false
      description: "Search string for filtering"
      schema:
        type: string
        example: "John Doe"
