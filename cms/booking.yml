openapi: "3.0.3"
info:
  title: Booking API in calendar feature For CMS
  version: "1.0.1"
servers:
  - url: http://35.198.194.208:30015/booking
    description: Production server
  - url: https://localhost:3000/api
    description: Local server
tags:
  - name: Store
    description: Store related operations
  - name: Service
    description: Service related operations
  - name: Industry
    description: Industry related operations
  - name: Team
    description: Team related operations
security:
  - BearerAuth: []

paths:

  # ------------------------------------------
  # CMS
  # ------------------------------------------

  # Book

  /v3/cms/stores/{storeId}/books:
    get:
      description: "Get all bookings (depends on CMS role)"
      tags:
        - Book
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
        - $ref: "#/components/parameters/bookingStatusFilterQuery"
          description: "Filter bookings by status, can be multiple values, e.g. ?status=CONFIRMED&status=CANCELED"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - books
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  books:
                    type: array
                    items:
                      $ref: "#/components/schemas/BookView2"
  /v3/cms/books:
    post:
      description: "Create a booking (by CMS user, e.g. admin, staff)"
      tags:
        - Book
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookCreate2"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: "./common.yml#/components/schemas/Id"
                    description: Id of the booking
                    example: "1234567890"
  /v3/cms/teams/{teamId}/books:
    get:
      description: "Get booked services of a team member in a store in time range"
      tags:
        - Book
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookView2"

  # Service

  /v3/cms/stores/{storeId}/services:
    get:
      description: "Get services of a store."
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering, search by name of the service"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - services
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  services:
                    type: array
                    items:
                      $ref: "#/components/schemas/ServiceView2"
  /v3/cms/teams/{teamId}/services:
    get:
      description: "Get services of a team member in a store"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServiceView2"
  /v3/cms/services:
    post:
      description: "Create a service"
      tags:
        - Service
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateService"
      responses:
        "201":
          description: Created
  /v3/cms/services/{serviceId}:
    get:
      description: "Get a service by id"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceView2"
    put:
      description: "Update a service"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateService"
      responses:
        "200":
          description: OK
    delete:
      description: "Delete a service"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "204":
          description: No Content
 
  # Team

  /v3/cms/services/{serviceId}/teams:
    get:
      description: "Get all team members for a service (no pagination)"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - teams
                  - pagination
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
  /v3/cms/stores/{storeId}/teams:
    get:
      description: "Get team members for a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - teams
                  - pagination
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
  /v3/cms/stores/{storeId}/availability:
    get:
      description: "Get availability of a store in time range"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - availability
                  properties:
                    teamId:
                      $ref: "./common.yml#/components/schemas/Id"
                      description: Id of the team member (undefined if the availability is of the store)
                    availability:
                      $ref: "#/components/schemas/Availability"
  /v3/cms/teams/{teamId}:
    get:
      description: "Get a team member by id"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
    delete:
      description: "Remove a team member from a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "204":
          description: No Content
  /v3/cms/teams/{teamId}/work-hours:
    patch:
      description: "Update work hours of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - workHours
              properties:
                workHours:
                  $ref: "#/components/schemas/WorkHoursInWeek"
      responses:
        "200":
          description: OK
  /v3/cms/teams/{teamId}/time-off:
    get:
      description: "Get time off of a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TimeOff"
    post:
      description: "Create a time off for a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTimeOff"
      responses:
        "201":
          description: Created
    delete:
      description: "Delete a time off for a team member in a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - teamTimeOffId
              properties:
                timeOffId:
                  $ref: "./common.yml#/components/schemas/Id"
                  description: Id of the time off to be deleted of the team
      responses:
        "204":
          description: No Content

  # Profile

  /v3/cms/stores/{storeId}/profiles:
    get:
      description: "Get all profiles of the store (booked customers with accountId)"
      tags:
        - Profile
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "#/components/parameters/hasAccountQuery"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering, search by name or phone number of the profile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - profiles
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  profiles:
                    type: array
                    items:
                      $ref: "#/components/schemas/Profile"
    post:
      description: "Create a profile of the store (booked customers with accountId)"
      tags:
        - Profile
      parameters:
        - $ref: "#/components/parameters/storeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProfile"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: "./common.yml#/components/schemas/Id"
                    description: Id of the profile in Booking domain (not the account id).
  /v3/cms/stores/{storeId}/customers:
    get:
      description: "Get all customers of the store"
      tags:
        - Profile
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./common.yml#/components/schemas/Id"
                  description: Account IDs.
  /v3/cms/profiles/{profileId}:
    get:
      description: "Get a profile by id"
      tags:
        - Profile
      parameters:
        - $ref: "#/components/parameters/profileId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
    put:
      description: "Update a profile by id"
      tags:
        - Profile
      parameters:
        - $ref: "#/components/parameters/profileId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProfile"
      responses:
        "200":
          description: OK
    delete:
      description: "Delete a profile by id"
      tags:
        - Profile
      parameters:
        - $ref: "#/components/parameters/profileId"
      responses:
        "204":
          description: No Content
  
  # Store
  /v3/cms/stores/{storeId}:
    get:
      description: "Get a store by id"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store2"
    put:
      description: "Update a store by id"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: OK

  # ------------------------------------------
  # Customer
  # ------------------------------------------

  # Store

  /v3/customer/stores:
    get:
      description: "Get all stores subscribed by a customer by accountId"
      tags:
        - Store
      parameters:
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/Store2"
  /v3/customer/stores/{storeId}/connection:
    post:
      description: "Connect a client to a store, (only for Client)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
    delete:
      description: "Disconnect a client from a store, (only for Client)"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK

  # Book

  /v3/customer/books:
    get:
      description: "Get all bookings of a customer by accountId (accountId is from the token)"
      tags:
        - Book
      parameters:
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering by store name"
        - $ref: "#/components/parameters/bookingStatusFilterQuery"
          description: "Filter bookings by status, can be multiple values, e.g. ?status=CONFIRMED&status=CANCELED"
        - $ref: "#/components/parameters/storeIdQuery"
          description: "Filter bookings by store id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - books
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  books:
                    type: array
                    items:
                      $ref: "#/components/schemas/BookView2"

  # ------------------------------------------
  # Unauthenticated
  # ------------------------------------------

  # Store

  /v3/unauth/stores/query/popular:
    get:
      description: "Get popular stores for a customer. Sorted by number of bookings in the timeframe."
      tags:
        - Store
      parameters:
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - name: timeframe
          in: query
          required: false
          schema:
            type: string
            enum:
              - weekly
              - monthly
              - all-time
            default: weekly
          description: "Timeframe for popular stores, can be weekly, monthly, or all-time. Default is weekly."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/Store2"
  /v3/unauth/stores/query/nearby:
    get:
      description: "Get nearby stores for a customer. Sorted by distance from the given location."
      tags:
        - Store
      parameters:
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - name: kilometers
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
          description: "Radius in kilometers to search for nearby stores, default is 10 km."
        - name: latitude
          in: query
          required: true
          schema:
            type: number
            format: float
          description: "Latitude of the location"
        - name: longitude
          in: query
          required: true
          schema:
            type: number
            format: float
          description: "Longitude of the location"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/Store2"
  /v3/unauth/stores/query/suggested:
    get:
      description: "Get suggested stores for a customer."
      tags:
        - Store
      parameters:
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - name: mode
          in: query
          required: false
          schema:
            type: string
            enum:
              - featured
              - new
              - recommended
            default: featured
          description: "Mode of suggested stores. (1) Featured: stores that is featured by the platform (promoted) or being viewed most (promotion + view count + ...). (2) New: newly created stores. (3) Recommended: stores that is recommended based on customer's preferences (if any), if user is not logged in, return random stores. Default is featured."
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/Store2"
  /v3/unauth/stores/query/search:
    get:
      description: "Search stores for a customer by name or description."
      tags:
        - Store
      parameters:
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
        - name: categories
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: "Filter by categories, can be multiple categories, e.g. ?categories=Haircut&categories=Massage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - stores
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/Store2"

  /v3/unauth/stores/{storeId}:
    get:
      description: "Get a store by id for a customer"
      tags:
        - Store
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store2"
  /v3/unauth/stores/find-by-subdomain/{subdomain}:
    get:
      description: "Get a store by subdomain for a customer"
      tags:
        - Store
      parameters:
        - name: subdomain
          in: path
          required: true
          schema:
            type: string
          description: "Subdomain of the store"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  store:
                    $ref: "#/components/schemas/Store2"
                    description: "Store details (undefined if not found)"
  
  # Book

  /v3/unauth/books:
    post:
      description: "Book multiple services in a store by a customer (accountId is from the token). Note: Customer can be anonymous with different schema (see the schema option)"
      tags:
        - Book
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookCreate2"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: "./common.yml#/components/schemas/Id"
                    description: Id of the booking
                    example: "1234567890"
  /v3/unauth/books/{bookId}:
    get:
      description: "Get a booking by id for a customer"
      tags:
        - Book
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookView2"
  /v3/unauth/books/{bookId}/status:
    patch:
      description: "Update status of a booking by id"
      tags:
        - Book
      parameters:
        - $ref: "#/components/parameters/bookId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  $ref: "#/components/schemas/BookingStatus"
      responses:
        "200":
          description: OK

  # Service

  /v3/unauth/stores/{storeId}/services:
    get:
      description: "Get services of a store for a customer. Where only active services are returned. (no hidden services)"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/storeId"
        - $ref: "./common.yml#/components/parameters/page"
        - $ref: "./common.yml#/components/parameters/limit"
        - $ref: "./common.yml#/components/parameters/search"
          description: "Search string for filtering, search by name of the service"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - pagination
                  - services
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  services:
                    type: array
                    items:
                      $ref: "#/components/schemas/ServiceView2"
  /v3/unauth/services/{serviceId}:
    get:
      description: "Get a service by id for a customer. Only active services are returned. (no hidden services)"
      tags:
        - Service
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceView2"
  /v3/unauth/stores/{storeId}/services/categories:
    get:
      description: "Get all service categories of a store for a customer"
      tags:
        - Service
      parameters:
        - name: top
          in: query
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
          description: "Number of top categories to return, sorted by number of services in the category. Default is 5."
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Name of the service category
                  example: "Haircut"

  # Team

  /v3/unauth/services/{serviceId}/teams:
    get:
      description: "Get all team members for a service for a customer"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - teams
                  - pagination
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
  /v3/unauth/stores/{storeId}/teams:
    get:
      description: "Get team members for a store"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/storeId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - teams
                  - pagination
                properties:
                  pagination:
                    $ref: "./common.yml#/components/schemas/Pagination"
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"                
  /v3/unauth/teams/{teamId}:
    get:
      description: "Get a team member by id"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
  /v3/unauth/teams/{teamId}/availability:
    get:
      description: "Get availability of a team member in a store in time range"
      tags:
        - Team
      parameters:
        - $ref: "#/components/parameters/teamId"
        - $ref: "#/components/parameters/start"
        - $ref: "#/components/parameters/end"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Availability"

components:
  schemas:
    Time:
      type: object
      properties:
        hour:
          type: integer
          example: 9
          description: Hour of the time (0-23)
          maximum: 23
          minimum: 0
        minute:
          type: integer
          example: 0
          description: Minute of the time
          maximum: 59
          minimum: 0
      required:
        - hour
        - minute
    TimeRange:
      type: object
      description: Time range in a day. From start to end time (hour and minute).
      required:
        - start
        - end
      properties:
        start:
          $ref: "#/components/schemas/Time"
          description: Start time
        end:
          $ref: "#/components/schemas/Time"
          description: End time
    Availability:
      description: Is an array of time ranges that is available for booking (of a store or a team member). Each item is an array of time ranges in a day.
      type: array
      items:
        type: array
        items:
          $ref: "#/components/schemas/TimeRange"
      example:
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 18
              minute: 0
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 12
              minute: 0
          - start:
              hour: 13
              minute: 0
            end:
              hour: 18
              minute: 0
        - - start:
              hour: 9
              minute: 0
            end:
              hour: 12
              minute: 0
          - start:
              hour: 15
              minute: 0
            end:
              hour: 18
              minute: 0
    WorkHoursInWeek:
      type: array
      items:
        type: object
        required:
          - dayOfWeek
          - workHours
        properties:
          dayOfWeek:
            type: integer
            example: 0
            description: Day of the week (0-6) where 0 is Monday and 6 is Sunday.
            maximum: 6
            minimum: 0
          workHours:
            type: array
            items:
              $ref: "#/components/schemas/TimeRange"
            description: Work hours of the team member in a day.
      example:
        - dayOfWeek: 0
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 1
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
                minute: 0
            - start:
                hour: 13
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 2
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
                minute: 0
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 3
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0
        - dayOfWeek: 4
          workHours:
            - start:
                hour: 9
                minute: 0
              end:
                hour: 12
            - start:
                hour: 15
                minute: 0
              end:
                hour: 18
                minute: 0
    BooleanQuery:
      type: string
      enum:
        - "1"
        - "0"
      example: "1"
      description: Boolean query parameter for filtering, can be used in queries like ?email=1&sms=0
    
    BookBase:
      type: object
      required:
        - start
        - end
        - notification
      properties:
        start:
          $ref: "./common.yml#/components/schemas/DateTime"
        end:
          $ref: "./common.yml#/components/schemas/DateTime"
        notification:
          $ref: "#/components/schemas/BookingNotification"
          description: Notification for the booking
        comment:
          type: string
          example: "Please bring your own mask"
          description: Comment for the service
    BookingStatus:
      type: string
      enum:
        - new
        - ready
        - denied
        - done
        - canceled
      example: "new"
      description: Status of the booking.
    BookingNotification:
      type: object
      required:
        - email
        - sms
        - googleCalendar
      properties:
        email:
          type: boolean
          description: Send email notification
          example: true
        sms:
          type: boolean
          description: Send SMS notification
          example: true
        googleCalendar:
          type: object
          description: Google Calendar notification details
          required:
            - isEnabled
          properties:
            isEnabled:
              type: boolean
              description: Whether to send Google Calendar notification
              example: false
            accessToken:
              type: string
              description: Google Calendar access token. Required if isEnabled is true and user account is not from Google SSO.
              example: "ya29.a0AfH6SM..."
    BookView2:
      description: Base book view with common fields.
      type: object
      properties:
        id:
          $ref: "./common.yml#/components/schemas/Id"
        start:
          $ref: "./common.yml#/components/schemas/DateTime"
        end:
          $ref: "./common.yml#/components/schemas/DateTime"
        notification:
          $ref: "#/components/schemas/BookingNotification"
          description: Notification for the booking
        comment:
          type: string
          example: "Please bring your own mask"
          description: Comment for the service
        profile:
          $ref: "#/components/schemas/Profile"
          description: Booking profile of the customer when they have created the booking (has ID).
        status:
          $ref: "#/components/schemas/BookingStatus"
        services:
          type: array
          items:
            $ref: "#/components/schemas/ServiceBookView"
          description: Services booked in this booking
        team:
          $ref: "#/components/schemas/Team"
          description: Team member assigned for this booking
        store:
          $ref: "#/components/schemas/StoreFlattern"
          description: Store where the booking is made
      required:
        - id
        - start
        - end
        - notification
        - services
        - team
        - profile
        - status
        - store
    BookCreate2:
      description: Create book with multiple services.
      type: object
      properties:
        storeId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        start:
          $ref: "./common.yml#/components/schemas/DateTime"
        end:
          $ref: "./common.yml#/components/schemas/DateTime"
        notification:
          $ref: "#/components/schemas/BookingNotification"
          description: Notification for the booking
        comment:
          type: string
          example: "Please bring your own mask"
          description: Comment for the service
        serviceIds:
          type: array
          items:
            $ref: "./common.yml#/components/schemas/Id"
          description: Array of service Ids booked in this booking
        teamId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the team member
        profile:
          $ref: "#/components/schemas/CreateProfile"
          description: Booking profile of the customer.
        redirectUrl:
          type: string
          format: uri
          example: "https://example.com/thank-you"
          description: Redirect URL after successful booking (for email notifications)
      required:
        - storeId
        - start
        - end
        - notification
        - serviceIds
        - teamId
        - profile

    Store2:
      type: object
      required:
        - id
        - adminId
        - metadata
      properties:
        id:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        adminId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the admin account
        metadata:
          type: object
          description: Metadata of the store, can be any key-value pairs
          additionalProperties: true
    StoreFlattern:
      type: object
      properties:
        id:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        adminId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the admin account
        name:
          type: string
          example: "My Store"
          description: Name of the store
        industry:
          type: string
          example: "Beauty"
          description: Industry of the store
        bookingPageUrl:
          type: string
          format: uri
          example: "https://example.com/booking"
          description: URL of the booking page for the store
        workHours:
          $ref: "#/components/schemas/WorkHoursInWeek"
          description: Work hours of the store in a week
        minutesPerChunk:
          type: integer
          example: 15
          description: Minutes chunk for the store (default is 15 minutes)
      required:
        - id
        - adminId
        - name
        - industry
        - bookingPageUrl
        - workHours
        - minutesPerChunk
      additionalProperties: true
    
    ProfileBase:
      type: object
      required:
        - name
      properties:
        accountId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the customer account. This is optional and can be null if the customer is anonymous.
        name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "1234567890"
        email:
          type: string
          example: "abc@gmail.com"
        address:
          type: string
          example: "123, Example Street, City, Country"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"
    Profile:
      allOf:
        - $ref: "#/components/schemas/ProfileBase"
          description: Profile of the customer with additional fields.
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the customer profile in Booking domain (not the account id).
            _aggregate:
              type: object
              description: Aggregate data for the customer profile, such as total bookings, etc.
              properties:
                bookingCount:
                  type: integer
                  example: 10
                  description: Total number of bookings made by the customer
    CreateProfile:
      allOf:
        - $ref: "#/components/schemas/ProfileBase"

    CMSRole:
      type: number
      enum:
        - 1
        - 2
        - 3
      description: Role of the user (1 - admin, 2 - manager, 3 - employee)
    CreateTeam:
      type: object
      required:
        - accountId
        - storeId
        - role
        - workHours
      properties:
        accountId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the account
        storeId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        role:
          $ref: "#/components/schemas/CMSRole"
        workHours:
          $ref: "#/components/schemas/WorkHoursInWeek"
    Team:
      allOf:
        - $ref: "#/components/schemas/CreateTeam"
        - type: object
          required:
            - id
            - serviceIds
          properties:
            id:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the team member in Booking domain (not the account id).
            serviceIds:
              type: array
              items:
                $ref: "./common.yml#/components/schemas/Id"
              description: Array of service Ids that the team member can provide
    CreateTimeOff:
      type: object
      required:
        - fromDate
        - toDate
      properties:
        fromDate:
          $ref: "./common.yml#/components/schemas/DateTime"
          description: Start date of the time off
        toDate:
          $ref: "./common.yml#/components/schemas/DateTime"
          description: End date of the time off
    TimeOff:
      allOf:
        - $ref: "#/components/schemas/CreateTimeOff"
        - type: object
          required:
            - id
            - teamId
          properties:
            id:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the time off in Booking domain (not the account id).
            teamId:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the team member

    ServiceCore:
      type: object
      required:
        - storeId
        - name
        - duration
        - hidden
      properties:
        storeId:
          $ref: "./common.yml#/components/schemas/Id"
          description: Id of the store
        name:
          type: string
          example: "Haircut"
          description: Name of the service
        description:
          type: string
          example: "A simple haircut service"
          description: Description of the service
        duration:
          type: integer
          example: 30
          description: Duration of the service in minutes.
          minimum: 0
        category:
          type: string
          example: "Hair"
          description: Category of the service
        avatar:
          type: string
          description: Avatar of the service
        hidden:
          type: boolean
          example: false
          description: Is the service hidden or not
        price:
          type: number
          example: 20.5
          description: Price of the service, 0 means free service
          minimum: 0
          default: 0
        appearance:
          type: string
          example: "#FF5733"
          description: Appearance color of the service in hex format, e.g. #FF5733
          pattern: "^#([0-9A-Fa-f]{6})$"
          default: "#000000"
    CreateService:
      allOf:
        - $ref: "#/components/schemas/ServiceCore"
        - type: object
          required:
            - memberIds
          properties:
            memberIds:
              type: array
              items:
                $ref: "./common.yml#/components/schemas/Id"
              description: Team members who can provide the service
    ServiceView2:
      allOf:
        - $ref: "#/components/schemas/ServiceCore"
        - type: object
          required:
            - id
            - teamIds
          properties:
            id:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the service
            teamIds:
              type: array
              items:
                $ref: "./common.yml#/components/schemas/Id"
              description: Ids of team members who can provide the service
    ServiceBookView:
      allOf:
        - $ref: "#/components/schemas/ServiceCore"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "./common.yml#/components/schemas/Id"
              description: Id of the service

  parameters:
    accountId:
      name: accountId
      in: path
      required: true
      description: "Id of the account"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    storeId:
      name: storeId
      in: path
      required: true
      description: "Id of the store"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    teamId:
      name: teamId
      in: path
      required: true
      description: "Id of a team member"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    serviceId:
      name: serviceId
      in: path
      required: true
      description: "Id of the service"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    bookId:
      name: bookId
      in: path
      required: true
      description: "Id of the booking"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    profileId:
      name: profileId
      in: path
      required: true
      description: "Id of the profile"
      schema:
        $ref: "./common.yml#/components/schemas/Id"

    start:
      name: start
      in: query
      description: "Start of the time range in date time"
      schema:
        type: string
        format: date-time
        example: "2021-01-01T09:00:00Z"
    end:
      name: end
      in: query
      description: "End of the time range in date time"
      schema:
        type: string
        format: date-time
        example: "2021-01-01T18:00:00Z"
    storeIdQuery:
      name: storeId
      in: query
      description: "Id of the store"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    teamIdQuery:
      name: teamId
      in: query
      description: "Id of the team member"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    serviceIdQuery:
      name: serviceId
      in: query
      description: "Id of the service"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    accountIdQuery:
      name: accountId
      in: query
      description: "Id of the account"
      schema:
        $ref: "./common.yml#/components/schemas/Id"
    bookingStatusFilterQuery:
      name: status
      in: query
      description: "Filter bookings by status. Can be multiple values, e.g. ?status=CONFIRMED&status=CANCELED"
      schema:
        type: array
        items:
          $ref: "#/components/schemas/BookingStatus"
    hasAccountQuery:
      name: hasAccount
      in: query
      description: "Filter profiles by whether they have an account or not"
      schema:
        $ref: "#/components/schemas/BooleanQuery"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token"
